{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;;;;;ACpBiB;AACH;AACkB;AACH;AACH;AACkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qEAAqE,gCAAgC;AACrG;AACA,kCAAkC,6BAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAU;AACxC,6BAA6B,uDAAS;AACtC,iCAAiC,yEAAe;AAChD;AACA,aAAa;AACb,gCAAgC,sDAAsD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAAgB;AAC5C,2BAA2B,mEAAe;AAC1C,iCAAiC,qFAAqB;AACtD;AACA,aAAa;AACb,gCAAgC,kDAAkD;AAClF;AACA;AACA;AACA;AACA,8DAA8D,+BAA+B;AAC7F;AACA;AACA;AACA;AACA;AACA,4CAA4C,qFAAqB;AACjE;AACA;AACA,iDAAiD,yEAAe;AAChE;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACyB;;;;;;;;;;;;;;;;AClGuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA,QAAQ,6DAAU;AAClB;AACA;AACA;AACA,+CAA+C,4BAA4B;AAC3E,mDAAmD,gCAAgC;AACnF,gDAAgD,6BAA6B;AAC7E,iDAAiD,8BAA8B;AAC/E,gDAAgD,6BAA6B;AAC7E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;AC5D3B,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,eAAe,gBAAgB,sCAAsC,kBAAkB;AACvF,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,CAAC;AACyC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,mDAAU;AACgB;;;;;;;;;;;;;;;AC7B5B;AACA;AACA,yCAAyC;AACzqB;;;;;;;;;;;;;;;;ACjGyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,uDAAuD;AACvD,uCAAuC;AACvC;AACA,yBAAyB,uDAAS;AAClC,2BAA2B,uDAAS;AACpC,2BAA2B,uDAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;ACxC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;;;;;;;;;;;;;;;AC7ErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,4BAA4B,OAAO;AACnC,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;;;;;;;;;;;;;;;AC1Dd;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;UCrBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNmE;AACnE;AACA,IAAI,4EAAc","sources":["webpack://template-ts/./src/Controllers/AnalogWatchController.ts","webpack://template-ts/./src/Controllers/mainWatchController.ts","webpack://template-ts/./src/Controllers/watchController.ts","webpack://template-ts/./src/Models/AnalogWatchModel.ts","webpack://template-ts/./src/Models/watchModel.ts","webpack://template-ts/./src/Views/AnalogWatchView.ts","webpack://template-ts/./src/Views/watchView.ts","webpack://template-ts/./src/utils/Matrix3x3.ts","webpack://template-ts/./src/utils/enableDrag.ts","webpack://template-ts/webpack/bootstrap","webpack://template-ts/webpack/runtime/define property getters","webpack://template-ts/webpack/runtime/hasOwnProperty shorthand","webpack://template-ts/webpack/runtime/make namespace object","webpack://template-ts/./src/index.ts"],"sourcesContent":["var AnalogWatchController = /** @class */ (function () {\n    function AnalogWatchController(model, view, onDelete) {\n        var _this = this;\n        this.model = model;\n        this.view = view;\n        this.onDelete = onDelete;\n        var deleteButton = document.createElement(\"button\");\n        deleteButton.textContent = \"\";\n        deleteButton.className = \"btn delete-btn\";\n        deleteButton.addEventListener(\"click\", function () {\n            return _this.onDelete(_this.model, _this.view);\n        });\n        this.view.getContainer().appendChild(deleteButton);\n    }\n    AnalogWatchController.prototype.update = function (time) {\n        var syncedTime = this.model.syncTime(time);\n        this.view.updateDisplay(syncedTime);\n    };\n    return AnalogWatchController;\n}());\nexport { AnalogWatchController };\n","import { WatchModel } from \"../Models/watchModel\";\nimport { WatchView } from \"../Views/watchView\";\nimport { WatchController } from \"../Controllers/watchController\";\nimport { AnalogWatchModel } from \"../Models/AnalogWatchModel\";\nimport { AnalogWatchView } from \"../Views/AnalogWatchView\";\nimport { AnalogWatchController } from \"../Controllers/AnalogWatchController\";\nvar MainController = /** @class */ (function () {\n    function MainController() {\n        var _this = this;\n        this.watches = [];\n        this.addDigitalButton = document.createElement(\"button\");\n        this.addDigitalButton.className = \"btn add-btn-dg\";\n        this.addDigitalButton.textContent = \"Add Digital watch\";\n        this.addDigitalButton.addEventListener(\"click\", function () {\n            return _this.addDigitalWatch();\n        });\n        document.body.appendChild(this.addDigitalButton);\n        this.addAnalogButton = document.createElement(\"button\");\n        this.addAnalogButton.className = \"btn add-btn-an\";\n        this.addAnalogButton.textContent = \"Add Analog watch\";\n        this.addAnalogButton.addEventListener(\"click\", function () { return _this.addAnalogWatch(); });\n        document.body.appendChild(this.addAnalogButton);\n        setInterval(function () { return _this.syncWatches(); }, 1000);\n    }\n    MainController.prototype.addOffsetPrompt = function () {\n        var systemTimezoneOffset = new Date().getTimezoneOffset() / -60;\n        console.log(\"D\\u00E9calage horaire d\\u00E9tect\\u00E9 : UTC\".concat(systemTimezoneOffset >= 0 ? \"+\" : \"\").concat(systemTimezoneOffset));\n        var systemTimezoneMessage = \"Le fuseau horaire actuel est : UTC\".concat(systemTimezoneOffset >= 0 ? \"+\" : \"\").concat(systemTimezoneOffset, \".\");\n        var timezoneOffset = prompt(\"\".concat(systemTimezoneMessage, \"\\n\\nEntrez un fuseau horaire (entre -12 et +14) :\"));\n        var offset;\n        var isValidInput = false;\n        while (!isValidInput) {\n            if (timezoneOffset === null) {\n                return { isValidInput: false, offset: 0 };\n            }\n            if (timezoneOffset.trim() === \"\") {\n                offset = systemTimezoneOffset - 1;\n                isValidInput = true;\n                break;\n            }\n            if (isNaN(Number(timezoneOffset))) {\n                alert(\"Erreur : Vous devez entrer un nombre valide.\");\n                timezoneOffset = prompt(\"\".concat(systemTimezoneMessage, \"\\n\\nEntrez un fuseau horaire (entre -12 et +14) :\"));\n                continue;\n            }\n            offset = parseInt(timezoneOffset, 10) - 1;\n            if (offset < -12 || offset > 14) {\n                alert(\"Erreur : Le fuseau horaire doit Ãªtre compris entre -12 et +14.\");\n                timezoneOffset = prompt(\"\".concat(systemTimezoneMessage, \"\\n\\nEntrez un fuseau horaire (entre -12 et +14) :\"));\n                continue;\n            }\n            isValidInput = true;\n        }\n        return { isValidInput: isValidInput, offset: offset };\n    };\n    MainController.prototype.addDigitalWatch = function () {\n        var _this = this;\n        var validOffsetPrompt = this.addOffsetPrompt();\n        if (validOffsetPrompt.isValidInput) {\n            var model_1 = new WatchModel(validOffsetPrompt.offset);\n            var view_1 = new WatchView();\n            var controller = new WatchController(model_1, view_1, function () {\n                return _this.deleteWatch(model_1, view_1);\n            });\n            this.watches.push({ model: model_1, view: view_1, controller: controller });\n            document.body.appendChild(view_1.getContainer());\n        }\n    };\n    MainController.prototype.addAnalogWatch = function () {\n        var _this = this;\n        var validOffsetPrompt = this.addOffsetPrompt();\n        if (validOffsetPrompt.isValidInput) {\n            var model = new AnalogWatchModel(validOffsetPrompt.offset);\n            var view = new AnalogWatchView();\n            var controller = new AnalogWatchController(model, view, function (model, view) {\n                return _this.deleteWatch(model, view);\n            });\n            this.watches.push({ model: model, view: view, controller: controller });\n            document.body.appendChild(view.getContainer());\n        }\n    };\n    MainController.prototype.deleteWatch = function (model, view) {\n        this.watches = this.watches.filter(function (watch) { return watch.model !== model; });\n        view.getContainer().remove();\n    };\n    MainController.prototype.syncWatches = function () {\n        var now = new Date();\n        this.watches.forEach(function (watch) {\n            if (watch.controller instanceof AnalogWatchController) {\n                watch.controller.update(now);\n            }\n            else if (watch.controller instanceof WatchController) {\n                // watch.controller.update(now);\n            }\n        });\n    };\n    return MainController;\n}());\nexport { MainController };\n","import { EnableDrag } from \"../utils/enableDrag\";\nvar WatchController = /** @class */ (function () {\n    function WatchController(model, view, onDelete) {\n        var _this = this;\n        this.modeClicks = 0;\n        this.model = model;\n        this.view = view;\n        this.view.bindDeleteButton(function () { return _this.handleDelete(); });\n        this.onDelete = onDelete;\n        this.setupEventHandlers();\n        this.startUpdateLoop();\n        EnableDrag(view.getContainer());\n    }\n    WatchController.prototype.setupEventHandlers = function () {\n        var _this = this;\n        this.view.bindModeButton(function () { return _this.handleMode(); });\n        this.view.bindIncreaseButton(function () { return _this.handleIncrease(); });\n        this.view.bindLightButton(function () { return _this.handleLight(); });\n        this.view.bindFormatButton(function () { return _this.handleFormat(); });\n        this.view.bindResetButton(function () { return _this.handleReset(); });\n    };\n    WatchController.prototype.startUpdateLoop = function () {\n        var _this = this;\n        setInterval(function () {\n            _this.view.updateDisplay(_this.model.time, _this.model.mode, _this.model.light, _this.model.hourFormat);\n        }, 1000);\n    };\n    WatchController.prototype.handleMode = function () {\n        this.modeClicks = (this.modeClicks + 1) % 3;\n        switch (this.modeClicks) {\n            case 1:\n                this.model.setMode(\"hours\");\n                break;\n            case 2:\n                this.model.setMode(\"minutes\");\n                break;\n            default:\n                this.model.setMode(\"none\");\n        }\n    };\n    WatchController.prototype.handleIncrease = function () {\n        this.model.incrementTime();\n        if (this.model.mode !== \"none\") {\n            this.model.setEditedTime(this.model.time);\n        }\n    };\n    WatchController.prototype.handleLight = function () {\n        this.model.toggleLight();\n    };\n    WatchController.prototype.handleFormat = function () {\n        this.model.toggleHourFormat();\n    };\n    WatchController.prototype.handleReset = function () {\n        this.model.resetTime();\n    };\n    WatchController.prototype.handleDelete = function () {\n        this.onDelete();\n    };\n    return WatchController;\n}());\nexport { WatchController };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { WatchModel } from \"./watchModel\";\nvar AnalogWatchModel = /** @class */ (function (_super) {\n    __extends(AnalogWatchModel, _super);\n    function AnalogWatchModel(offset) {\n        var _this = _super.call(this) || this;\n        _this.offset = offset;\n        return _this;\n    }\n    AnalogWatchModel.prototype.syncTime = function (now) {\n        var offsetMs = this.offset * 60 * 60 * 1000;\n        return new Date(now.getTime() + offsetMs);\n    };\n    return AnalogWatchModel;\n}(WatchModel));\nexport { AnalogWatchModel };\n","var WatchModel = /** @class */ (function () {\n    function WatchModel(timezoneOffset) {\n        if (timezoneOffset === void 0) { timezoneOffset = 0; }\n        this.editedTime = null;\n        this.editMode = \"none\";\n        this.isLightOn = false;\n        this.is12HourFormat = false;\n        this.timezoneOffset = timezoneOffset;\n        this.currentTime = this.getCurrentTime();\n        this.startClock();\n    }\n    Object.defineProperty(WatchModel.prototype, \"time\", {\n        // Getters/Setters\n        get: function () {\n            return this.editedTime || this.currentTime;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WatchModel.prototype, \"mode\", {\n        get: function () {\n            return this.editMode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WatchModel.prototype, \"light\", {\n        get: function () {\n            return this.isLightOn;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WatchModel.prototype, \"hourFormat\", {\n        get: function () {\n            return this.is12HourFormat;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WatchModel.prototype.startClock = function () {\n        var _this = this;\n        setInterval(function () {\n            if (_this.editedTime) {\n                _this.editedTime.setSeconds(_this.editedTime.getSeconds() + 1);\n            }\n            else {\n                _this.currentTime = _this.getCurrentTime();\n            }\n        }, 1000);\n    };\n    WatchModel.prototype.getCurrentTime = function () {\n        var now = new Date();\n        var offset = this.timezoneOffset * 3600 * 1000;\n        return new Date(now.getTime() + offset);\n    };\n    WatchModel.prototype.syncTime = function (baseTime) {\n        var offset = this.timezoneOffset * 3600 * 1000;\n        this.currentTime = new Date(baseTime.getTime() + offset);\n    };\n    WatchModel.prototype.setMode = function (newMode) {\n        this.editMode = newMode;\n        if (newMode === \"none\") {\n            if (!this.editedTime) {\n                this.editedTime = new Date(this.currentTime);\n            }\n        }\n    };\n    WatchModel.prototype.incrementTime = function () {\n        var timeToUpdate = this.editedTime || this.currentTime;\n        var newTime = new Date(timeToUpdate);\n        if (this.editMode === \"hours\") {\n            newTime.setHours((newTime.getHours() + 1) % 24);\n        }\n        else if (this.editMode === \"minutes\") {\n            newTime.setMinutes((newTime.getMinutes() + 1) % 60);\n            if (newTime.getMinutes() === 0) {\n                newTime.setHours((newTime.getHours() + 1) % 24);\n            }\n        }\n        this.editedTime = newTime;\n    };\n    WatchModel.prototype.toggleLight = function () {\n        this.isLightOn = !this.isLightOn;\n    };\n    WatchModel.prototype.toggleHourFormat = function () {\n        this.is12HourFormat = !this.is12HourFormat;\n    };\n    WatchModel.prototype.resetTime = function () {\n        this.currentTime = new Date();\n        this.editedTime = null;\n    };\n    WatchModel.prototype.setEditedTime = function (newTime) {\n        this.editedTime = newTime;\n    };\n    return WatchModel;\n}());\nexport { WatchModel };\n","import { Matrix3x3 } from \"../utils/Matrix3x3\";\nvar AnalogWatchView = /** @class */ (function () {\n    function AnalogWatchView() {\n        this.container = document.createElement(\"div\");\n        this.container.className = \"analog-clock\";\n        this.hourHand = document.createElement(\"div\");\n        this.hourHand.className = \"hand hour-hand\";\n        this.minuteHand = document.createElement(\"div\");\n        this.minuteHand.className = \"hand minute-hand\";\n        this.secondHand = document.createElement(\"div\");\n        this.secondHand.className = \"hand second-hand\";\n        this.container.append(this.hourHand, this.minuteHand, this.secondHand);\n    }\n    AnalogWatchView.prototype.updateDisplay = function (time) {\n        var hours = time.getHours() % 12;\n        var minutes = time.getMinutes();\n        var seconds = time.getSeconds();\n        // Calculer les angles des aiguilles\n        var hourAngle = hours * 30 + minutes * 0.5; // 30 degrÃ©s par heure, 0.5 degrÃ© par minute\n        var minuteAngle = minutes * 6 + seconds * 0.1; // 6 degrÃ©s par minute, 0.1 degrÃ© par seconde\n        var secondAngle = seconds * 6; // 6 degrÃ©s par seconde\n        // Appliquer les transformations matricielles\n        var hourMatrix = Matrix3x3.rotationMatrix(hourAngle);\n        var minuteMatrix = Matrix3x3.rotationMatrix(minuteAngle);\n        var secondMatrix = Matrix3x3.rotationMatrix(secondAngle);\n        // Appliquer les transformations aux aiguilles\n        this.applyTransform(this.hourHand, hourMatrix);\n        this.applyTransform(this.minuteHand, minuteMatrix);\n        this.applyTransform(this.secondHand, secondMatrix);\n    };\n    // Appliquer une transformation matricielle Ã  un Ã©lÃ©ment\n    AnalogWatchView.prototype.applyTransform = function (element, matrix) {\n        var transform = \"matrix(\".concat(matrix.values[0][0], \", \").concat(matrix.values[1][0], \", \").concat(matrix.values[0][1], \", \").concat(matrix.values[1][1], \", \").concat(matrix.values[0][2], \", \").concat(matrix.values[1][2], \")\");\n        element.style.transform = transform;\n    };\n    AnalogWatchView.prototype.getContainer = function () {\n        return this.container;\n    };\n    return AnalogWatchView;\n}());\nexport { AnalogWatchView };\n","var WatchView = /** @class */ (function () {\n    function WatchView() {\n        document.getElementById(\"watch-root\");\n        this.createUI();\n    }\n    WatchView.prototype.createUI = function () {\n        this.container = document.createElement(\"div\");\n        this.container.className = \"watch-container\";\n        this.display = document.createElement(\"div\");\n        this.display.className = \"display\";\n        this.modeBtn = document.createElement(\"button\");\n        this.modeBtn.className = \"btn mode-btn\";\n        this.modeBtn.textContent = \"MOD\";\n        this.increaseBtn = document.createElement(\"button\");\n        this.increaseBtn.className = \"btn increase-btn\";\n        this.increaseBtn.textContent = \"ADJ\";\n        this.lightBtn = document.createElement(\"button\");\n        this.lightBtn.className = \"btn light-btn\";\n        this.lightBtn.textContent = \"LT\";\n        this.formatBtn = document.createElement(\"button\");\n        this.formatBtn.className = \"btn format-btn\";\n        this.formatBtn.textContent = \"AP\";\n        this.resetBtn = document.createElement(\"button\");\n        this.resetBtn.className = \"btn reset-btn\";\n        this.resetBtn.textContent = \"RST\";\n        this.deleteBtn = document.createElement(\"button\");\n        this.deleteBtn.className = \"btn delete-btn\";\n        this.deleteBtn.textContent = \"\";\n        this.container.append(this.display, this.modeBtn, this.increaseBtn, this.lightBtn, this.formatBtn, this.resetBtn, this.deleteBtn);\n        document.body.appendChild(this.container);\n    };\n    WatchView.prototype.getContainer = function () {\n        return this.container;\n    };\n    WatchView.prototype.updateDisplay = function (time, editMode, isLightOn, is12HourFormat) {\n        var hours = time.getHours();\n        var minutes = this.formatNumber(time.getMinutes());\n        var seconds = this.formatNumber(time.getSeconds());\n        if (is12HourFormat) {\n            var period = hours >= 12 ? \"PM\" : \"AM\";\n            if (hours === 0) {\n                hours = 12;\n            }\n            else if (hours > 12) {\n                hours = hours % 12;\n            }\n            this.display.innerHTML = \"\\n            <span class=\\\"\".concat(editMode === \"hours\" ? \"blink\" : \"\", \"\\\">\").concat(this.formatNumber(hours), \"</span>:\\n            <span class=\\\"\").concat(editMode === \"minutes\" ? \"blink\" : \"\", \"\\\">\").concat(minutes, \"</span>:\\n            <span class=\\\"seconds\\\">\").concat(seconds, \"</span>\\n            <span class=\\\"period\\\">\").concat(period, \"</span> <!-- Afficher AM ou PM dynamiquement -->\\n        \");\n        }\n        else {\n            this.display.innerHTML = \"\\n            <span class=\\\"\".concat(editMode === \"hours\" ? \"blink\" : \"\", \"\\\">\").concat(this.formatNumber(hours), \"</span>:\\n            <span class=\\\"\").concat(editMode === \"minutes\" ? \"blink\" : \"\", \"\\\">\").concat(minutes, \"</span>:\\n            <span>\").concat(seconds, \"</span>\\n        \");\n        }\n        this.display.style.backgroundColor = isLightOn ? \"#FBE106\" : \"#FFFFFF\";\n    };\n    WatchView.prototype.formatNumber = function (num) {\n        return num.toString().padStart(2, \"0\");\n    };\n    //Ã©venements :\n    WatchView.prototype.bindFormatButton = function (handler) {\n        this.formatBtn.addEventListener(\"click\", handler);\n    };\n    WatchView.prototype.bindModeButton = function (handler) {\n        this.modeBtn.addEventListener(\"click\", handler);\n    };\n    WatchView.prototype.bindIncreaseButton = function (handler) {\n        this.increaseBtn.addEventListener(\"click\", handler);\n    };\n    WatchView.prototype.bindLightButton = function (handler) {\n        this.lightBtn.addEventListener(\"click\", handler);\n    };\n    WatchView.prototype.bindResetButton = function (handler) {\n        this.resetBtn.addEventListener(\"click\", handler);\n    };\n    WatchView.prototype.bindDeleteButton = function (handler) {\n        this.deleteBtn.addEventListener(\"click\", handler);\n    };\n    return WatchView;\n}());\nexport { WatchView };\n","var Matrix3x3 = /** @class */ (function () {\n    function Matrix3x3(values) {\n        this.values = values;\n    }\n    // Multiplier deux matrices\n    Matrix3x3.prototype.multiply = function (other) {\n        var result = [\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0],\n        ];\n        for (var i = 0; i < 3; i++) {\n            for (var j = 0; j < 3; j++) {\n                for (var k = 0; k < 3; k++) {\n                    result[i][j] += this.values[i][k] * other.values[k][j];\n                }\n            }\n        }\n        return new Matrix3x3(result);\n    };\n    // Appliquer une transformation Ã  un point (x, y)\n    Matrix3x3.prototype.transformPoint = function (x, y) {\n        var resultX = this.values[0][0] * x + this.values[0][1] * y + this.values[0][2];\n        var resultY = this.values[1][0] * x + this.values[1][1] * y + this.values[1][2];\n        return { x: resultX, y: resultY };\n    };\n    // CrÃ©er une matrice de rotation\n    Matrix3x3.rotationMatrix = function (angle) {\n        var rad = (angle * Math.PI) / 180;\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n        return new Matrix3x3([\n            [cos, -sin, 0],\n            [sin, cos, 0],\n            [0, 0, 1],\n        ]);\n    };\n    // CrÃ©er une matrice de translation\n    Matrix3x3.translationMatrix = function (dx, dy) {\n        return new Matrix3x3([\n            [1, 0, dx],\n            [0, 1, dy],\n            [0, 0, 1],\n        ]);\n    };\n    // CrÃ©er une matrice de mise Ã  l'Ã©chelle\n    Matrix3x3.scalingMatrix = function (sx, sy) {\n        return new Matrix3x3([\n            [sx, 0, 0],\n            [0, sy, 0],\n            [0, 0, 1],\n        ]);\n    };\n    Matrix3x3.prototype.getValues = function () {\n        return this.values;\n    };\n    return Matrix3x3;\n}());\nexport { Matrix3x3 };\n","export function EnableDrag(element) {\n    var isDragging = false;\n    var offsetX, offsetY;\n    element.addEventListener(\"mousedown\", function (e) {\n        isDragging = true;\n        offsetX = e.clientX - element.getBoundingClientRect().left;\n        offsetY = e.clientY - element.getBoundingClientRect().top;\n        element.style.cursor = \"grabbing\";\n    });\n    document.addEventListener(\"mousemove\", function (e) {\n        if (isDragging) {\n            element.style.left = \"\".concat(e.clientX - offsetX, \"px\");\n            element.style.top = \"\".concat(e.clientY - offsetY, \"px\");\n        }\n    });\n    document.addEventListener(\"mouseup\", function () {\n        if (isDragging) {\n            isDragging = false;\n            element.style.cursor = \"grab\";\n        }\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MainController } from \"./Controllers/mainWatchController\";\n// Initialiser l'application\nnew MainController();\n"],"names":[],"sourceRoot":""}